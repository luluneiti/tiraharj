# Mitä on testattu, miten tämä tehtiin
  - Kaikilla luokilla on oma JUnit-testiluokka, jossa on ko. luokan metodien testit
    - Poikkeuksena: pääohjelma, sovelluslogiikka (käyttöliittymän olioiden luonti ja algoritmin käynnistys), käyttöliittymä, 
      rajapinta-luokan abstraktit metodit 
  - Lisäksi on performanceTest-luokka, jossa testataan algoritmeja isommalla syötteellä ja ajoista on tehty testaustilasto tiedosto
  
# Minkälaisilla syötteillä testaus tehtiin
  - Matriisin koko vaihdellut 5*5:stä 3000*3000:n 
  - Solmujen etäisyydet luvut väliltä 1-9 (pelkkiä ykkösiä, etäisyydet 1-9)
  - Eri pituiset polut 4-95 (linnuntietä)
  - Esteiden määrä vaihteli (2-10)
  - Algoritmeja testattu sekä 2- että 3-keolla
  - IDA* algoritmilla ongelmia välillä esteiden kanssa. Katso toteutus dokumentti.
  
# Miten testit voidaan toistaa
  - JUnit testit voidaan ajaa uudelleen. Dijkstran ja Astarin testiluokissa on omat metodit 2- ja 3-keolle, jotta mahdolliset erot 
  kekojen välilä eivät haittaa testien ajamista.
  - Käyttöliittymä/pääohjelma testattu käsin eri testitapauksilla. 
    - Testitapaukset: 
      - eri algoritmien ajaminen eri keko-toteutuksilla
      - tilastojen näyttäminen
      - lyhimmän polun näyttäminen
      - etäisyyksien arpominen
      - validi lähtösolmu (ei tyhjä tai ulkona koordinaatistosta)
      - validi maalisolmu (ei tyhjä tai ulkona koordinaatistosta)
      - ettei lähtä- ja/tai maalisolmu sama kuin este (max- 3 estettä)
# Ohjelman toiminnan empiirisen testauksen tulosten esittäminen graafisessa muodossa.
  - https://github.com/luluneiti/tiraharj/blob/master/dokumentaatio/Testaustilasto-Astar.png
  - https://github.com/luluneiti/tiraharj/blob/master/dokumentaatio/Testaustilasto-Dijkstra.png
  - https://github.com/luluneiti/tiraharj/blob/master/dokumentaatio/Testaustilasto-Kaikki.png
  - Lisätietoa: https://github.com/luluneiti/tiraharj/blob/master/dokumentaatio/Testaustilasto.pdf


